<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="scheduler_job_documentation_v1.1.xsl"?>
<description xmlns="http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1 http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1.xsd">

  <job name  = "JobSchedulerPLSQLJob"
       title = "Execute PL/SQL procedure"
       order = "both"
       tasks = "unbounded"
       category="PLSQL;SQL;Database;JITL;Oracle"
       since="1.3.12.2347"

       >
    <script language   = "java"
            java_class = "sos.scheduler.db.JobSchedulerPLSQLJobJSAdapterClass"
            resource   = "1">
    </script>
  </job>

  <releases>
    <release id="1.0" created="2006-05-11" modified="2006-05-11">
      <title>Version 1.0</title>
      <author name="Andreas Liebert" email="andreas.liebert@sos-berlin.com"/>
      <note language="de"><div xmlns="http://www.w3.org/1999/xhtml">Initiale Auslieferung</div></note>
      <note language="en"><div xmlns="http://www.w3.org/1999/xhtml">Initial release</div></note>
    </release>
  </releases>

  <resources>
          <xi:include href="./jars/sos.scheduler.jar.xml" parse="xml" />
        <xi:include href="./jars/sos.spooler.jar.xml" parse="xml" />
        <xi:include href="./jars/sos.util.jar.xml" parse="xml" />
        <xi:include href="./jars/sos.connection.jar.xml" parse="xml" />
  </resources>

  <configuration>
        <xi:include href="./notes/OrderOrStandAlone.xml" parse="xml" />

        <xi:include href="./notes/NodeParameterByStateName.xml" parse="xml">
            <xi:fallback>"./notes/NodeParameterByStateName.xml" not found</xi:fallback>
        </xi:include>

    <params id="job_parameter">

      <param name="command" required="true">
        <note language="de">
        <title>Das auszuführende Datenbankkommando</title>
<p>
            Es ist möglich, im Feld COMMAND mehrere Kommandos anzugeben, die der Reihe nach ausgeführt
            werden. Diese müssen durch ein Semikolon und einen darauf folgenden Zeilenwechsel (Newline) getrennt sein.
            Die Datenbank-Kommandos können parameterisiert werden. Dazu ist an beliebiger
            Stelle im Kommando eine Variable in der Form §{param} einzufügen.
            Diese wird dann vor der Ausführung durch den Wert des Auftragsparameters
            mit dem Namen [param] ersetzt.
</p>
<p>
                Alternativ kann als Wert des Parameters der Name einer Datei angegeben werden, die das auszuführende Script enthält.
</p>
        </note>
        <note language="en">
        <div xmlns="http://www.w3.org/1999/xhtml">
        
        <title>Database Commands for the Job</title>
          <p>
            It is possible to define more than one instruction in the COMMAND field.
            Such instructions  are then carried out in the order in which they are written
            and must be separated by a semicolon and a subsequent new line.
            Parameters can be replaced in database commands. This is done by the addition of a variable in the form §{param}
            at any given point in a command. This variable is then given the value of the
            instruction parameter with the name [param] before execution.
          </p>
          <p>
                           Alternatively, the name of a file can be specified that contains the script.
          </p>
          </div>
        </note>
      </param>


      <param name="db_url" required="true">
        <note language="de">
          <div xmlns="http://www.w3.org/1999/xhtml">
            jdbc url (e.g.  jdbc:oracle:thin:@localhost:1521:XE)
            Mit credential store: cs://path/url
          </div>
        </note>
        <note language="en">
          <div xmlns="http://www.w3.org/1999/xhtml">
            jdbc url (e.g. jdbc:oracle:thin:@localhost:1521:XE)
            with credential store: cs://path/url
          </div>
        </note>
      </param>

      <param name="db_user" required="true">
        <note language="de">
          <div xmlns="http://www.w3.org/1999/xhtml">
            Datenbank User
            Mit credential store: cs://path/user
          </div>
        </note>
        <note language="en">
          <div xmlns="http://www.w3.org/1999/xhtml">
            database user
            with credential store: cs://path/user
          </div>
        </note>
      </param>

      <param name="db_password" required="false">
        <note language="de">
        <title>Das Kennwort des Nutzers für den Zugriff auf die Datenbank</title>
          <div xmlns="http://www.w3.org/1999/xhtml">
            Datenbank Passwort
            Mit credential store: cs://path/password
          </div>
        </note>
        <note language="en">
        <title>The user password for accessing the database</title>
          <div xmlns="http://www.w3.org/1999/xhtml">
            database password
            with credential store: cs://path/password
          </div>
        </note>
      </param>

      <xi:include href="./params/param_variable_parser_reg_expr.xml" parse="xml" />


    <param name="credential_store_file" required="false">
        <note language="de">
        <title>Speicherort der Credential Keystore Datei</title>
<p>
	     Der Name der Keepass Datei, die die Credentials für den Zugriff auf die Datenbank enthält.
</p>
<p>
        Alternativ kann der Wert des Parameters in der Url mit ?file= angegeben werden.
</p>
        </note>
        <note language="en">
        <div xmlns="http://www.w3.org/1999/xhtml">
        
        <title>Location of the Credential Store file</title>
          <p>
            The name of the keepass file that contains the credentials for the access to the database.
          </p>
          <p>
            Alternatively it is possible to specify the value in the url with ?file=
          </p>
          </div>
        </note>
      </param>
	  
    <param name="credential_store_key_file" required="false">
        <note language="de">
        <title>Speicherort der Credential Keystore Schlüssel Datei</title>
<p>
	     Der Name der Keepass Schlüssel Datei, die den Schlüssel für den Zugriff auf die Keepass Datei enthält (falls diese mit einer Schlüsseldatei geschützt ist). Wenn keine Keypass Schlüsseldatei angegeben wird, wird der Name der aus dem Namen der Keepass Datei gebildet indem die Erweiterung durch .key ersetzt wird.
</p>
<p>
        Alternativ kann der Wert des Parameters in der Url mit ?keyfile= angegeben werden.
</p>
        </note>
        <note language="en">
        <div xmlns="http://www.w3.org/1999/xhtml">
        
        <title>Location of the Credential Store file</title>
          <p>
            The name of the keepass key file that contains the key for the credentials for the access to the database (if a key file is assigned to the keepass file). When no keepass key file is given, the file name is build with the name of the keepass file with changing the extension to .key.
          </p>
          <p>
            Alternatively it is possible to specify the value in the url with ?keyfile=
          </p>
          </div>
        </note>
      </param>
	  
    <param name="credential_store_entry_path" required="false">
        <note language="de">
        <title>Pfad für die Einträge in der Keepass Datei</title>
<p>
	     Der Pfad der die Entries in der Keepass Datei enthält. Dient dazu die Angabe der Werte zu vereinfachen indem der Pfad nur einmal angegeben werden muss.
</p>
<p>
        Alternativ kann der Wert des Parameters in der Url mit ?entry_path= angegeben werden.
</p>
        </note>
        <note language="en">
        <div xmlns="http://www.w3.org/1999/xhtml">        
        <title>Path for the entries in the keepass file</title>
          <p>
           To speciy a path for all entries. This makes the values for e.g. the password shorter.
		   Example: 
		 
		   credential_store_entry_path=/sos/scheduler
		   value for password: cs://mydb
		   In the keepass file you find the entry in /sos/scheduler/mydb
		   
          </p>
          <p>
            Alternatively it is possible to specify the value in the url with ?entry_path=
          </p>
          </div>
        </note>
      </param>


      </params>

      <params id="return_parameter">
        <!-- created at 27.09.2012 -->
            <param name="sql_error" required="false" default_value="" DataType="SOSOptionString" Category="database" OptionName="sql_error" Alias=""
                usewith="" see="" since="">
                <note language="de">
                    <title>Fehlermeldungen des Clients oder des Servers</title>
                    <xhtml:div>
                        <p>
                            Kommt es bei der Ausführung des Codes zu einem (oder mehreren) Fehlern, so wird der Fehlertext auf dieser Variablen im Auftrag gespeichert.
                            Ist kein Fehler aufgetreten, so ist der Inhalt der Variablen leer.
                        </p>
                    </xhtml:div>
                </note>
                <note language="en">
                    <title>Error Messages of the client or the server</title>
                    <xhtml:div>
                        <p>
                            If during the execution of the code one (or more) errors occurs, the error-text will be stored on this variable in the order.
                            If no error occurs then the contents of the variable will remain empty.
                        </p>
                    </xhtml:div>
                </note>
            </param>

            <xi:include href="./params/param_std_out_output.xml" parse="xml">
                <xi:fallback>./params/param_std_out_output.xml not found</xi:fallback>
            </xi:include>
            <!-- xi:include href="./params/param_std_err_output.xml" parse="xml">
                <xi:fallback>./params/param_std_err_output.xml not found</xi:fallback>
            </xi:include-->
    </params>
  </configuration>

  <documentation>
    <note language="de">
        <title>Wozu der Job verwendet wird.</title>
            <p>Der Job führt PL/SQL Code aus.
            </p>
            <p>
            Es ist möglich, zum einen eine dedizierte Fehlerauswertung zu erhalten und
            zum anderen die Folgesteuerung in einer Job-Kette zu erleichtern.
            Ebenso nützlich ist es, direkt in der Ausgabe des Scripts enthaltene Informationen in Parameter zu transferieren.
            </p>
        </note>
    <note language="en">
        <title>What is the purpose of this job?</title>
        <p>
        The job executes PL/SQL code.
        </p>
    </note>

    <note language="de">
        <title>Wie wird das auszuführende Script definiert?</title>
        <p>            Das Skript kann in einer separaten Datei gespeichert sein.
            Oder es kann als Wert des Parameters <paramref>command</paramref> angegeben werden.
        </p>
<p>
Bevor das Script gestartet wird, wird das Script durch den Job modifiziert.
Es werden alle im Script direkt angegebenen Namen der JobScheduler Parameter durch ihren aktuellen Wert substitutiert.
Unterstützt werden die Schreibweisen: %parameter_name%, ${SCHEDULER_PARAM_parameter_name}
</p>

        </note>
    <note language="en">
        <title>How is the script defined?</title>
        <p>
        The script can be saved to a separate file.
             Or it can be specified as the value of the parameter <paramref>command</paramref>.
             </p>
             <p>
Before the script is executed, the script is modified by the job.
All directly specified name of JobScheduler parameters are substituted by their current value.
The following notations are supported: %parameter_name%, ${SCHEDULER_PARAM_parameter_name}
</p>

    </note>

    <note language="de">
        <title>Wie können Ergebnisse in Folgejobs weiterverwendet werden?</title>
    <p>
    Der Job ergänzt den Auftrag um entsprechende Parameter.
    Zum einen sind dies statische Parameter, wie sie im Template in dem Abschnitt "return Parameter" beschrieben sind.
    Zum anderen sind dies dynamische Parameter.
    Der Job parsiert die Ausgaben des Skripts und extrahiert daraus, unter Verwendung eines regulären Ausdrucks, sowohl die
    Namen als auch die Werte dieser Parameter.
    Der reguläre Ausdruck wird mit dem Parameter <paramref>variable_parser_reg_exp</paramref> definiert.
    </p>
    <p>
    Diese Parameter sind von allen Jobs in allen Job-Schritten lesbar.
    Der Wert der Parameter kann auch von anderen Jobs in später auszuführenden Job-Schritten verändert werden.
    </p>
    </note>
    <note language="en">
        <title>How can results be reused in subsequent jobs?</title>
        <p>
        The job transfers the appropriate parameters in the order.
     The first of these are static parameters, such as those in the template docu described in the section "return parameters".
     On the other hand, these are dynamic parameters.
     The job analyzing the output of the script, and extracted there from using a regular expression, both
     Names and the values of these parameters.
     The regular expression is defined by the parameter <paramref>variable_parser_reg_exp</paramref>.
        </p>
        <p>
        These parameters are readable by all jobs in all job steps.
     The value of the parameter can be changed by other jobs.
        </p>
    </note>

    <p>
<codeexample type="plsql">
<embeddedExample type="plsql">
    declare
      howmany NUMBER;
      p_id varchar2(20) := null;
    begin
      dbms_output.put_line('set variable1=value1');
      p_id := '12345';
      --
      -- If the job or order contains the parameter
      --
      -- table_name=scheduler_variables
      --
      -- then all following selects are substituted to 'select count(*) into howmany from scheduler_variables;'
      --
      select count(*) into howmany from ${SCHEDULER_PARAM_table_name};
      select count(*) into howmany from %table_name%;
      select count(*) into howmany from %TABLE_NAME%;
      select count(*) into howmany from ${SCHEDULER_PARAM_TABLE_NAME};
      select count(*) into howmany from ${scheduler_param_table_name};
      select count(*) into howmany from ${sChEdUlEr_pArAm_tAbLe_nAmE};
      --
      -- now put the results to the buffer
      -- JS will get the results from the buffer
      --
      dbms_output.put_line('The table %table_name% has ' || howmany || ' rows.');
      dbms_output.put_line('set howmany is ' || howmany);
      dbms_output.put_line('set variable1 is ' || p_id);
      dbms_output.put_line('set variable2 is value2');
    end;
</embeddedExample>
<explanation language="de">
<title >Beispiel: PL/SQL Code</title>
            <p>
             Wird der Job in einer Job-Kette gestartet durch einen Auftrag gestartet, dann können dem Auftrag folgende Parameter zurückgegeben werden
             (siehe hierzu den Parameter <paramref>variable_parser_reg_expr</paramref>).
             Hierzu wird die Ausgabe des Skripts mit dem regulären Ausdruck "^SET\s+([^\s]+)\s*IS\s+(.*)$" parsiert.
            </p>
            <p>
             Im obigen Beispiel werden folgende Parameter zurückgegeben:
            </p>
            <p>
            <ul>
                <li>howmany=8</li>
                <li>variable1=12345</li>
                <li>variable2=value2</li>
            </ul>
            </p>
            <p>Wird ein Parameter mehrfach gesetzt so wird der letzte gefundene Wert als Auftrags-Parameter verwendet.</p>
</explanation>
<explanation language="en">
<title >Example: PL/SQL code</title>
<p>
If the job or order contains the parameter
"table_name=scheduler_variables"
then all following selects are substituted to 'select count(*) into howmany from scheduler_variables;'
</p>
            <p>
             If the job is started in a job chain by an order, then the following parameters are added to the order as additional parameters
              (see the parameter <paramref>variable_parser_reg_expr</paramref>).
              For this purpose, the output of the script is parsed with the regular expression "^SET\s+([^\s]+)\s*IS\s+(.*)$".
            </p>
            <p>
             In the above example the following parameters are returned:
            </p>
            <p>
            <ul>
                <li>howmany=8</li>
                <li>variable1=12345</li>
                <li>variable2=value2</li>
            </ul>
            </p>
            <p>If a parameter is set several times then the last value is used as the order parameter.</p>
</explanation>
</codeexample>
</p>

  </documentation>


</description>
