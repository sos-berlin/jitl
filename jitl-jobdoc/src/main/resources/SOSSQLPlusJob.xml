<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="scheduler_job_documentation_v1.1.xsl"?>
<description xmlns="http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1 http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1.xsd">

    <job name="SOSSQLPlusJob" title="Start SQL*Plus client and execute a sql*plus script" order="both" tasks="unbounded" since="1.3.12.2268">
        <script language="java" java_class="sos.scheduler.db.SOSSQLPlusJobJSAdapterClass" resource="1">
        </script>
    </job>

    <releases>
        <release id="1.0" created="2012-09-27" modified="2012-09-27">
            <title>Version 1.7</title>
            <author name="kb" email="kb  sos-berlin.com" />
            <note language="de">
                <xhtml:div>Initiales Release</xhtml:div>
            </note>
            <note language="en">
                <xhtml:div>Initial Release</xhtml:div>
            </note>
        </release>
    </releases>

    <resources>
        <xi:include href="./jars/sos.scheduler.jar.xml" parse="xml" />
        <xi:include href="./jars/sos.spooler.jar.xml" parse="xml" />
        <xi:include href="./jars/sos.settings.jar.xml" parse="xml" />
        <xi:include href="./jars/sos.util.jar.xml" parse="xml" />
        <xi:include href="./jars/log4j.jar.xml" parse="xml" />
        <xi:include href="./jars/sos.VirtualFileSystem.jar.xml" parse="xml" />
        <xi:include href="./jars/sos.JSHelper.jar.xml" parse="xml" />
    </resources>

    <configuration>
        <xi:include href="./notes/OrderOrStandAlone.xml" parse="xml" />

    <xi:include href="./notes/NodeParameterByStateName.xml" parse="xml">
        <xi:fallback>"./notes/NodeParameterByStateName.xml" not found</xi:fallback>
    </xi:include>

        <params id="job_parameter">

        <!-- created at 03.10.2012 -->
            <param name="ignore_ora_messages" required="false" default_value="" DataType="SOSOptionStringValueList" Category="sql,pl/sql,sql*plus"
                OptionName="IgnoreOraMessages" Alias="" usewith="" see="" since="1.3.12.2268">
                <note language="de">
                    <title>Oracle "ORA-" Fehler ignorieren</title>
                    <xhtml:div>
                    <p>
                    Fehlermeldungen des Oracle Datenbank-Servers, in der Form ORA-nnnnn, werden von diesem Job erkannt und führen nomalerweise dazu, dass
                    der Job mit einer Fehlermeldung abgebrochen wird.
                    Läuft der Job in einer Job-Kette so wird dann der nächste auszuführende Schritt (Step) über den "error-state" emittelt.
                    </p>
                    <p>
                    Sollen bestimmte Fehlermeldungen ignoriert werden, so kann dies mit diesem Parameter festgelegt werden.
                    Sollen alle Fehlermeldungen ignoriert werden, so kann *all angegeben werden.
                    </p>
                        <p>
Als Wert dieses Parameters sind die Nummern der Oracle Fehlermeldungen, die nicht als Fehler interpretiert werden sollen zu spezifizieren.
Mehrere Nummern sind durch ein Semikolon ";" zu trennen.
Dabei ist der Text "ORA-" nicht anzugeben.
                        </p>
                    </xhtml:div>
                </note>
                <note language="en">
                    <title>Ignore "ORA-" errors</title>
                    <xhtml:div>
                        <p>
                        The value of this parameter are the numbers of the Oracle error messages that should not be interpreted as an error to specify.
                        Multipe error numbers must be separated by a colon (;).
                        The text "ORA-" may be omitted.
                        </p>
                    </xhtml:div>
                </note>
            </param>
                    <!-- created at 03.10.2012 -->
            <param name="ignore_sp2_messages" required="false" default_value="" DataType="SOSOptionStringValueList" Category="sql,pl/sql,sql*plus"
                OptionName="IgnoreSP2Messages" Alias="" usewith="" see="" since="1.3.12.2268">
                <note language="de">
                    <title>Zu ignorierende SQL*Plus Fehler</title>
                    <xhtml:div>
                    <p>
                    Fehlermeldungen des SQL*Plus Clients, in der Form SP2-nnnnn, werden von diesem Job erkannt und führen nomalerweise dazu, daß
                    der Job mit einer Fehlermeldung abgebrochen wird.
                    Läuft der Job in einer Job-Kette so wird dann der nächste auszuführende Schritt (Step) über den "error-state" emittelt.
                    </p>
                    <p>
                    Sollen bestimmte Fehlermeldungen ignoriert werden, so kann dies mit diesem Parameter festgelegt werden.
                    Sollen alle Fehlermeldungen ignoriert werden, so kann *all angegeben werden.
                    </p>

                        <p>
Als Wert dieses Parameters sind die Nummern der SQL*Plus Fehlermeldungen, die nicht als Fehler interpretiert werden sollen zu spezifizieren.
Mehrere Nummern sind durch ein Semikolon ";" zu trennen.
Dabei kann der Text "SP2-" weggelassen werden.
                        </p>
                    </xhtml:div>
                </note>
                <note language="en">
                    <title>Ignore SQL*Plus Errors</title>
                    <xhtml:div>
                        <p>
                        The value of this parameter are the numbers of the SQL*Plus error messages that should not be interpreted as an error to specify.
                        Multipe error numbers must be separated by a colon (;).
                        The text "SP2-" may be omitted.
                        </p>
                    </xhtml:div>
                </note>
            </param>

            <param name="shell_command" required="true" default_value="sqlplus" DataType="SOSOptionInFileName">
                <note language="de">
                    <title>Dateiname des SQL*Plus Clients</title>
                    <xhtml:div>
                        <p>
                            Der Wert dieses Parameters spezifiziert den Namen des SQL*Plus Clients, der für die Ausführung
                            des SQL*Plus Codes verwendet werden soll.
                        </p>
                        <p>
                            Falls der Pfad-Name, in dem der Client installiert wurde, in der Path-Variablen
                            enthalten ist, so kann die Angabe des Pfades entfallen.
                            (Standard für eine Installation ist ${ORACLE_HOME}/bin).
                        </p>
                    </xhtml:div>
                </note>
                <note language="en">
                    <title>Name of the SQL*Plus Client executable</title>
                    <xhtml:div>
                        <p>
                        The value of this parameter specifies the name of the SQL*Plus client.
The SQL*Plus code is processed by the client.</p>
                    </xhtml:div>
                </note>
            </param>

            <xi:include href="./params/param_sqlplus_script_file.xml" parse="xml" />
            <xi:include href="./params/param_sqlplus_db_url.xml" parse="xml" />
            <xi:include href="./params/param_variable_parser_reg_expr.xml" parse="xml" />

            <param name="db_user" required="false" DataType="SOSOptionUserName">
                <note language="de">
                    <title>Benutzer-ID des Datenbank-Benutzers</title>
                    <xhtml:div>
                    <p>
                        Datenbank User
                        </p>
                    </xhtml:div>
                </note>
                <note language="en">
                    <title>User-ID of the database user</title>
                    <xhtml:div>
                    <p>
                        database user
                        </p>
                    </xhtml:div>
                </note>
            </param>

            <param name="db_password" required="false" DataType="SOSOptionPassword" Category="Authentication">
                <note language="de">
                    <title>Passwort des Datenbankbennutzers</title>
                    <xhtml:div>
                        Datenbank Passwort
                    </xhtml:div>
                </note>
                <note language="en">
                    <title>Password of the database user</title>
                    <xhtml:div>
                        database password
                    </xhtml:div>
                </note>
            </param>

            <param name="Command_Line_options" required="false" default_value="-S -L" DataType="SOSOptionString" Category="shell" OptionName="CommandLineOptions"
                Alias="" usewith="shell_command" see="" since="1.3.12.2268">
                <note language="de">
                    <title>SQL*Plus Client Optionen</title>
                    <xhtml:div>
                        <p>
                            Die Optionen, die das Verhalten des SQL*Plus Clients steuern, sind als Wert dieser Option anzugeben.
                        </p>
                    </xhtml:div>
                </note>
                <note language="en">
                    <title>SQL*Plus Client Options</title>
                    <xhtml:div>
                        <p>
                            The value of this parameter contains the options which are available for the SQL*PLUS client on the command-line.
                        </p>
                    </xhtml:div>
                </note>
            </param>

            <!-- created at 27.09.2012 -->
            <param name="include_files" required="false" default_value="" DataType="SOSOptionString" Category="filehandling" OptionName="IncludeFiles"
                Alias="" usewith="" see="" since="1.3.12.2268">
                <note language="de">
                    <title>Einzufügende Code-Fragmente</title>
                    <xhtml:div>
                        <p>
                            Mit diesem Parameter können Code-Fragmente angegeben werden, die zusätzlich zum auszuführenden SQL*Plus Code, ausgeführt werden. Der SQL*Plus Code wird
                            um den Code dieser Fragmente temporär vor der Ausführung erweitert.
                            Es sind die Namen der Dateien anzugeben, durch Semikolon getrennt, die die Code-Fragmente enthalten.
                            Der Inhalt der Dateien wird an den Anfang des SQL*Plus Codes eingefügt.
                        </p>
                    </xhtml:div>
                </note>
                <note language="en">
                    <title>Code Fragments to include</title>
                    <xhtml:div>
                        <p>
                            This parameter can be specified for code fragments, which are additional to execute the SQL*Plus code.
                            The SQL*Plus code is temporary extendes by these fragments.
                            You must specify the names of files, separated by a semicolon, which contain the code fragments.
                            The contents of the files will be temporaryl inserted at the beginning of the SQL*Plus codes.
                        </p>
                    </xhtml:div>
                </note>
            </param>
        </params>

        <params id="return_parameter">
        <!-- created at 27.09.2012 -->
            <param name="sql_error" required="false" default_value="" DataType="SOSOptionString" Category="database" OptionName="sql_error" Alias=""
                usewith="" see="" since="">
                <note language="de">
                    <title>Fehlermeldungen des Clients oder des Servers</title>
                    <xhtml:div>
                        <p>
                            Kommt es bei der Ausführung des Codes zu einem (oder mehreren) Fehlern, so wird der Fehlertext auf dieser Variablen im Auftrag gespeichert.
                            Ist kein Fehler aufgetreten, so ist der Inhalt der Variablen leer.
                        </p>
                    </xhtml:div>
                </note>
                <note language="en">
                    <title>Error Messages of the client or the server</title>
                    <xhtml:div>
                        <p>
                            If during the execution of the code one (or more) errors occurs, the error-text will be stored on this variable in the order.
                            If no error occurs then the contents of the variable will remain empty.
                        </p>
                    </xhtml:div>
                </note>
            </param>

            <xi:include href="./params/param_std_out_output.xml" parse="xml">
                <xi:fallback>./params/param_std_out_output.xml not found</xi:fallback>
            </xi:include>
            <xi:include href="./params/param_std_err_output.xml" parse="xml">
                <xi:fallback>./params/param_std_err_output.xml not found</xi:fallback>
            </xi:include>
            <xi:include href="./params/param_exit_code.xml" parse="xml">
                <xi:fallback>./params/param_exit_code.xml not found</xi:fallback>
            </xi:include>

<!--
            <xi:include href="./examples/filecopy/CopyMultipleSourcesFolder.job.txt" parse="text">
                <xi:fallback>./examples/CopyMultipleSourcesFolder.job.xml not found</xi:fallback>
            </xi:include>
 -->


        </params>
        <params id="other">
        </params>

    </configuration>

    <documentation>
            <note language="de">
        <title>Wozu der Job verwendet wird.</title>
            <p>Der Job führt ein SQL*Plus Skript aus.
            Der Job startet den SQL*Plus Client in einem eigenen Prozeß.
            Dabei behält der Job die Kontrolle über den Programmablauf.
            </p>
            <p>
            Bei der Verwendung des SQL*Plus Clients ist es möglich, zum einen eine dedizierte Fehlerauswertung zu erhalten und
            zum anderen die Folgesteuerung in einer Job-Kette zu erleichtern.
            Ebenso nützlich ist es, daß direkt in der Ausgabe des Scripts enthaltene Informationen in Parameter zu transferieren.
            </p>
        </note>
    <note language="en">
        <title>What is the purpose of this job?</title>
        <p>
        The job executes a SQL*Plus script.
             The job runs the SQL*Plus client in a separate process.
             It keeps the job in control of the program flow.</p>
    </note>

    <note language="de">
        <title>Wie wird das auszuführende Script definiert?</title>
        <p>            Das Skript kann in einer separaten Datei gespeichert sein.
            Oder es kann als Wert des Parameters <paramref>command_script_file</paramref> angegeben werden.
        </p>
<p>
Bevor der SQL*Plus Client zur Ausführung des Skriptes gestartet wird, wird das Script durch den Job modifiziert.
Zunächst wird für jeden Parameter eine "DEFINE" Direktive erzeugt.
Diese Direktiven werden in eine temporäre Datei geschrieben.
Danach werden die evtl. angegebenen Code-Fragmente (siehe <paramref>include_files</paramref>) als nächsten Block in die
temporäre Datei kopiert.
Anschliessend werden im Script alle direkt angegebenen Namen der JobScheduler Parameter durch ihren aktuellen Wert substitutiert.
Das Skript wird als letzer Teil in die temporäre Datei geschrieben.
</p>
<p>
Mit der temporären Datei als Eingabedatei wird der Client gestartet.
</p>
        </note>
    <note language="en">
        <title>How is the script defined?</title>
        <p>
        The script can be saved to a separate file.
             Or it can be specified as the value of the parameter <paramref> command_script_file </paramref>.
             </p>
             <p>
Before the SQL*Plus client is launched for execution of the script, the script is modified by the job.
First, for each parameter a "DEFINE" directive is generated.
These directives are written to a temporary file.
Thereafter, the specified code fragments (see <paramref> include_files </paramref>) as the next block in the
temporary file is copied.
Subsequently, all directly specified name of JobScheduler parameters are substituted by their current value.
The script is written as the last part to the temporary file.
</p>
<p>
With the temporary file as input the client is started.
</p>
    </note>

    <note language="de">
        <title>Wie können im Skript Parameter verwendet werden?</title>
    <p>
    Parameter des Jobs, also Job- oder Auftrags-Parameter, können im Script auf zwei Arten verwendet werden.
    Zum einen sind alle Parameter über Ihren Namen, mit einem vorangestelltem "&amp;", im Script anwendbar.
    Sie werden als SQL*Plus Variable vom Job definiert.
    Der Job erzeugt für jeden Parameter eine "DEFINE"-Direktive.
    </p>
    <p>
    Zum anderen können die Namen der JobScheduler Parameter direkt im Skript verwendet werden.
    Diese Namen werden dann durch den aktuellen Wert des Parameters ersetzt.
    </p>
    </note>
    <note language="en">
        <title>How is it possible to use parameter in scripts?</title>
<p>
     Parameters of the job, job or order parameters, can be used in the script in two ways.
     Firstly, all parameters of their name, apply with a preceding "&amp;" in the script.
     They are defined as SQL*Plus variables by the job.
     The job created for each parameter a "DEFINE" directive.
     </p>
     <p>
     Secondly, the name of the JobScheduler parameters are used directly in the script.
     These names are then replaced by the current value of the parameter.
     </p>    </note>

    <note language="de">
        <title>Wie wird auf STDOUT und STDERR zugegriffen?</title>
    <p>
    Der Inhalt von STDOUT als auch STDERR werden als Werte der entsprechenden Auftrags-Parameter vom Job in den Auftrag übertragen.
    Damit kann jeder Folge-Schritt in einer Job-Kette auf diese Information zugreifen.
    </p>
    </note>
    <note language="en">
        <title>How do I access stdout and stderr?</title>
        <p>
        The contents of STDOUT and STDERR are as values of the corresponding order parameters of the job transferred to the order.
     Thus, every subsequent step in a job chain has access to this information.
</p>
    </note>

    <note language="de">
        <title>Wie können Ergebnisse in Folgejobs weiterverwendet werden?</title>
    <p>
    Der Job ergänzt den Auftrag um entsprechende Parameter.
    Zum einen sind dies statische Parameter, wie sie im Template in dem Abschnitt "return Parameter" beschrieben sind.
    Zum anderen sind dies dynamische Parameter.
    Der Job parsiert die Ausgaben des Skripts und extrahiert daraus, unter Verwendung eines regulären Ausdrucks, sowohl die
    Namen als auch die Werte dieser Parameter.
    Der reguläre Ausdruck wird mit dem Parameter <paramref>variable_parser_reg_exp</paramref> definiert.
    </p>
    <p>
    Diese Parameter sind von allen Jobs in allen Job-Schritten lesbar.
    Der Wert der Parameter kann auch von anderen Jobs in später auszuführenden Job-Schritten verändert werden.
    </p>
    </note>
    <note language="en">
        <title>How can results be reused in subsequent jobs?</title>
        <p>
        The job transfers the appropriate parameters in the order.
     The first of these are static parameters, such as those in the template docu described in the section "return parameters".
     On the other hand, these are dynamic parameters.
     The job analyzing the output of the script, and extracted there from using a regular expression, both
     Names and the values of these parameters.
     The regular expression is defined by the parameter <paramref> variable_parser_reg_exp </paramref>.
        </p>
        <p>
        These parameters are readable by all jobs in all job steps.
     The value of the parameter can be changed by other jobs.
        </p>
    </note>

    <note language="de">
        <title>Wie werden Fehler erkannt und behandelt?</title>
    <p>
    Der Job kann Fehler erkennen, die vom SQL*Plus Client gemeldet werden.
    Diese haben eine Nummer, die mit der Zeichenfolge "SP2-" beginnt.
    </p>
    <p>
    Ausserdem kann der Job Fehler erkennen, die der DB-Server bei oder nach der Ausführung des Skriptes meldet.
    Diese beginnen mit der Zeichenfolge "ORA-" und enthalten dann ebenfalls eine Nummer.
    </p>
    <p>
    Tritt entweder ein SP2- oder ein ORA-Fehler auf, so wird der Job fehlerhaft beendet.
    Der Return-Code 98 wird gesetzt.
    </p>
    <p>
    Zusätzlich ist der Fehlertext als Wert des Parameters <paramref>sql_error</paramref> in den Auftragsparametern gespeichert.
    </p>
    </note>
    <note language="en">
        <title>How are errors are detected and treated?</title>
        <p>
        The job can detect errors that are reported by the SQL * Plus client.
     These have a number that starts with the string "SP2".
     </p>
     <p>
     Moreover, the job can detect errors that the DB server reported during or after the execution of the script.
     These begin with the string "ORA" and then also contain a number.
     </p>
     <p>
     Occurs either SP2 or an ORA-error occurs, the job is terminated abnormally.
     A return code of 98 is set.
     </p>
     <p>
     Additionally, the error message is as value of the parameter <paramref> sql_error </paramref> stored in the order parameters.
     </p>
    </note>

    <note language="de">
        <title>Können Fehler ignoriert werden?</title>
    <p>
    Es gibt über die Parameter <paramref>ignore_sp2_messages</paramref> und <paramref>ignore_ora_messages</paramref> die Möglichkeit, alle oder
    einzelne Fehler zu ignorieren.
    Sie sind im STDOUT enthalten, auch wenn sie ignoriert werden.
    </p>
    </note>
    <note language="en">
        <title>Errors may be ignored?</title>
        <p>

It is possible to ignore errors.
  There are parameters <paramref> ignore_sp2_messages </paramref> and <paramref> ignore_ora_messages </paramref>.
There the numbers of ignored errors are specified as values.
    The error messages are contained in the STDOUT, even if they are ignored.        </p>
    </note>

<p>
<codeexample type="sql*plus">
<embeddedExample>
WHENEVER SQLERROR EXIT SQL.SQLCODE
WHENEVER OSERROR EXIT FAILURE

column end_date new_value BCY_DATE
column period new_value PN_YEAR_PERIOD
column period_prev new_value PN_YEAR_PERIOD_PREV

select '0' as end_date from dual;
prompt SET end_date IS &amp;BCY_DATE;
/
select '0' as period from dual;
prompt SET period IS &amp;PN_YEAR_PERIOD;
/
select '0' as period_prev from dual;
prompt SET period_prev IS &amp;PN_YEAR_PERIOD_PREV;
/
prompt SET end_date IS 1;
exit;
</embeddedExample>
<explanation language="de">
<title >Beispiel: SQL*Plus Skript</title>
            <p>
             Wird der Job in einer Job-Kette gestartet, dann kann dem Auftrag der Kette folgende Parameter zurückgegeben werden
             (siehe hierzu den Parameter <paramref>variable_parser_reg_expr</paramref>).
             Hierzu wird die Ausgabe des Skripts mit dem regulären Ausdruck "^SET\s+([^\s]+)\s*IS\s+(.*)$" parsiert.
            </p>
            <p>
             Im obigen Beispiel werden folgende Parameter zurückgegeben:
            </p>
            <p>
            <ul>
                <li>end_date=1</li>
                <li>period=0</li>
                <li>period_prev=0</li>
            </ul>
            </p>
            <p>Wird ein Parameter mehrfach gesetzt so wird der letzte gefundene Wert als Auftrags-Parameter verwendet.</p>
</explanation>
<explanation language="en">
<title >Example: SQL*Plus script</title>
            <p>
             If the job is started in a job chain, then the following parameters are returned to the order
              (see the parameter <paramref>variable_parser_reg_expr</paramref>).
              For this purpose, the output of the script is parsed with the regular expression "^SET\s+([^\s]+)\s*IS\s+(.*)$".
            </p>
            <p>
             In the above example the following parameters are returned:
            </p>
            <p>
            <ul>
                <li>end_date=1</li>
                <li>period=0</li>
                <li>period_prev=0</li>
            </ul>
            </p>
            <p>If a parameter is set several times then the last value is used as the order parameter.</p>
</explanation>
</codeexample>
</p>
    </documentation>
</description>
